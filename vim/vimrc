" ========
" Preamble
" ========
" Much of this is lifted from Steve Losh's excellent blog post about switching
" to Vim which I highly recommend you read.
"   vimrc: https://github.com/sjl/dotfiles/blob/master/vim/vimrc
"   blog post: http://stevelosh.com/blog/2010/09/coming-home-to-vim/
"
" use `:help <thing you are unsure about>` to learn more about these settings


" ==============
" Plugins
" ==============
" For the list of default plugins and to install them check out the install
" script in the `.dotfiles/scripts/install_vim_plugins.sh` script.

" Hit <C-e> then <space> to trigger Emmet
let g:user_emmet_leader_key = '<c-e>'
let g:user_emmet_expandabbr_key = g:user_emmet_leader_key . '<space>'

" Don't start Instant Markdown Preview by default
" (launch it with :InstantMarkdownPreview)
let g:instant_markdown_autostart = 0

" Enable Mustache snippets
let g:mustache_abbreviations = 1

" ===================================
" The basics - these make Vim livable
" ===================================
syntax on                       " syntax highlighting on
set nocompatible                " get rid of strict vi compatibility
set clipboard=unnamed           " share clipboard buffer on OS X
set nu                          " line numbering on
set showmatch                   " highlight matching pairs of brackets
set modeline                    " show what I'm doing
set showmode                    " show the mode on the dedicated line
set cursorline                  " highlight the current line the cursor is on
set ruler                       " which line am I on?
set hlsearch                    " highlight search tokens
set incsearch                   " incremental searching
set ignorecase                  " search without regards to case...
set smartcase                   " ...unless you type case
set gdefault                    " Applies substitutions globally by default
set backspace=indent,eol,start  " backspace over everything
set fileformats=unix,dos,mac    " open files from mac/dos
set nojoinspaces                " don't add extra whitespace when joining lines
"set textwidth=80               " automatically wrap at 80 chars
set nowrap                      " no wrapping!
set expandtab                   " replace tabs with spaces
set bs=2                        " fix backspacing in insert mode
set tabstop=2
set shiftwidth=2
set shiftround                  " When at 3 spaces, if I hit >>, go to column 4 not 5.
set autoindent                  " autoindent on
set hidden                      " Switch buffers without saving
set listchars=tab:▸\ ,eol:¬     " use these icons when displaying whitespace
"set undofile                   " I need to read up on this first

colors elflord                  " Decent color palette for dark backgrounds,
"colors desert                  " and light backgrounds, respectively.
hi ColorColumn ctermbg=lightgrey guibg=lightgrey


" and the most important change!
imap jj <Esc>



" ===========================================
" Deeper cuts - these make more Vim enjoyable
" ===========================================

" more reasonable navigation when wrapping is on
nmap k gk
nmap j gj

" Let me save/quit dammit!
command! Q q
command! W w

" disable Ex mode and Execute Command under cursor
nmap Q <Nop>
nmap K <Nop>

" `help fo-table` to see what this does
set formatoptions=qrn

" put all the .swp files in one place, ~/.vim-tmp
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/vtr/tmp,/tmp

" better file completion when trying to edit a new file and hitting <TAB>
set wildmenu
set wildmode=list:longest,full

" Make ctrlp ignore these files
set wildignore+=*.pyc                     " compiled python files
set wildignore+=*.jpg,*.jpeg,*.png,*.gif  " binary images
set wildignore+=*.ttf,*.otf,*.woff,*.svg  " fonts
set wildignore+=*.o                       " compiled object files
let g:ctrlp_custom_ignore = '\v(node_modules|bower_components|tmp|build|coverage)'

" word movements stop on an underscore, eg. within dont_skip_all_of_me
set iskeyword-=_

" enable better matching with %, like in html tags
runtime macros/matchit.vim

" turn off help button that you only ever hit accidentally
nnoremap <F1> <Esc>
inoremap <F1> <Esc>
vnoremap <F1> <Esc>

" switch between open/close pairs easily
" TODO: find new mapping, breaks CTRL-I functionality
"nnoremap <Tab> %
"vnoremap <Tab> %

" navigate splits with Ctrl-[h,j,k,l]
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" resize splits with Ctrl-[arrow key]
nnoremap <C-left> :vertical resize -5<cr>
nnoremap <C-down> :resize +5<cr>
nnoremap <C-up> :resize -5<cr>
nnoremap <C-right> :vertical resize +5<cr>

" Search using 'very-magic' regex mode.
nnoremap / /\v
vnoremap / /\v

" For inserting date-time into filename
cmap <F3> <C-R>=strftime("%Y-%m-%d-%H%M")<CR>

" delete into 'black hole register' so as not to overwrite copy buffer
nmap D "_d

" resize splits when the window is resized,
au VimResized * :wincmd =
" switch to split after creating it
set splitbelow
set splitright


" Toggle pastemode with F2, paste with F3
" TODO: extract a function
set pastetoggle=<F2>
nmap <F3> <F2>"*p<F2>
imap <F3> <ESC><F2>"*p<F2>i

" Display full file-path and buffer with Ctrl-G
nnoremap <C-g> 2<C-g>




" ===============
" Status Line
" ===============
set laststatus=2                             " always show statusbar
set statusline=
set statusline+=%-10.3n\                     " buffer number
set statusline+=%f\                          " filename
set statusline+=%h%m%r%w                     " status flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}] " file type
set statusline+=%=                           " right align remainder
set statusline+=0x%-8B                       " character value
set statusline+=%-14(%l,%c%V%)               " line, character
set statusline+=%<%P                         " file position



" ===============
" Leader commands
" ===============

let mapleader = " "

" clear highlighting after a search
nnoremap <leader><space> :noh<cr>

" Switch tabs
nmap <leader>( :tabprev<cr>
nmap <leader>) :tabnext<cr>

" create new tab
nmap <leader>T :tabe<cr>

" text/prose/markdown mode
nmap <leader>p :setlocal wrap<CR>:setlocal lbr<CR>:setlocal nonu<CR>:set spell<CR>:set colorcolumn=0<CR>:set ft=markdown<CR>
nmap <leader>t :setlocal wrap<CR>:setlocal lbr<CR>:setlocal nonu<CR>:set spell<CR>:set colorcolumn=0<CR>
nmap <leader>c :setlocal nowrap<CR>:setlocal nolbr<CR>:setlocal nu<CR>:set nospell<CR>

" turn on color column
nmap <leader>cc :set cc=80<CR>

" Compress/format JSON in paste buffer
nmap <leader>jc :!pbpaste \| jq -c \| pbcopy<CR>
nmap <leader>jf :!pbpaste \| jq -M \| pbcopy<CR>

" Reformat a selection (of SQL) using pg_format
vmap <leader>pf :!pg_format -g -k -s 2<CR>

" Copy the current file path to the clipboard
nnoremap <leader>cf :let @+ = expand('%')<CR>

" Copy the absolute path of the current file to the clipboard
nnoremap <leader>cF :let @+ = expand('%:p')<CR>


" CSS commands:
"--------------
" Sort CSS properties alphabetically
nnoremap <leader>AZ ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
" CSS Section comment block
nnoremap <leader>C VUO/* <ESC>a=<ESC>48.<CR><ESC>o=<ESC>a=<ESC>47.a */<ESC>
" CSS Sub-section comment block
nnoremap <leader>S VUI/* <ESC>o–<ESC>a–<ESC>48.A */<ESC>

" re-format a paragraph of text
nnoremap <leader>q gqip

" clean trailing whitespace
nnoremap <leader>w mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" Quick set (toggle) commands
nnoremap <leader>sn :setlocal number!<cr>
nnoremap <leader>ss :setlocal spell!<cr>
nnoremap <leader>sw :setlocal wrap!<cr>
nnoremap <leader>sp :setlocal paste!<cr>
nnoremap <leader>sl :setlocal list!<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Quick edit commands
nnoremap <leader>ev :tabe $MYVIMRC<cr>      " Vim config
nnoremap <leader>eg :tabe ~/.gitconfig<cr>  " Git config
nnoremap <leader>ez :tabe ~/.zshrc<cr>      " Zsh
nnoremap <leader>et :tabe ~/.tmux.conf<cr>  " Tmux

" Split windows vertically & horizontally
nnoremap <leader>ws :vs<cr>
nnoremap <leader>wh :sp<cr>

" ReStructuredText headers:
" section header (with overline)
nnoremap <leader>rh yypVr=yykP
" chapter heading, section heading, subsection, subsubsection
nnoremap <leader>rp yypVr#yykP
nnoremap <leader>ro yypVr=
nnoremap <leader>ri yypVr-
nnoremap <leader>ru yypVr^
nnoremap <leader>ry yypVr"

" wrap line with <%...%> or <%=...%>
nnoremap <leader>re I<% <ESC>A %><ESC>
nnoremap <leader>rw I<%= <ESC>A %><ESC>
" wrap line with {{...}} or {%...%}
nnoremap <leader>tv I{{ <ESC>A }}<ESC>
nnoremap <leader>tt I{% <ESC>A %}<ESC>


" Insert template Markdown comment
nnoremap <leader>mc I[//]: # (CHANGEME)<ESC>

" Toggle Undo tree (requires Undotree or Gundo)
nnoremap <leader>u :UndotreeToggle<CR>
nnoremap <leader>g :GundoToggle<CR>

" Rspec mappings
map <Leader>rf :call RunCurrentSpecFile()<CR>
map <Leader>rn :call RunNearestSpec()<CR>
map <Leader>rl :call RunLastSpec()<CR>

" ==========================
" Filetype-specific settings
" ==========================

" Remember to wrap first line at 50 chars and leave a blank line after though!
au FileType gitcommit set textwidth=72

" Markdown files
au BufRead,BufNewFile *.{md,markdown} set filetype=markdown
au BufRead,BufNewFile *.{md,markdown} set spell
au BufRead,BufNewFile *.{md,markdown} set nonu
au BufRead,BufNewFile *.{md,markdown} set wrap
au BufRead,BufNewFile *.{md,markdown} set lbr
au BufRead,BufNewFile *.{md,markdown} set colorcolumn=0

" C/C++
au BufRead,BufNewFile *.{c,cpp,h,hpp} set expandtab
au BufRead,BufNewFile *.{c,cpp,hpp,h} set shiftwidth=4
au BufRead,BufNewFile *.{c,cpp,hpp,h} set tabstop=4

" HTML
au BufRead,BufNewFile *.html set expandtab
au BufRead,BufNewFile *.html set shiftwidth=2
au BufRead,BufNewFile *.html set tabstop=2

" Javascript/TypeScript
au BufRead,BufNewFile *.js set expandtab
au BufRead,BufNewFile *.js set shiftwidth=2
au BufRead,BufNewFile *.js set tabstop=2
au BufRead,BufNewFile *.ts set expandtab
au BufRead,BufNewFile *.ts set shiftwidth=2
au BufRead,BufNewFile *.ts set tabstop=2

" Sass/CSS
au BufRead,BufNewFile *.scss set expandtab
au BufRead,BufNewFile *.scss set shiftwidth=2
au BufRead,BufNewFile *.scss set tabstop=2

" Python
au BufRead,BufNewFile *.py set expandtab
au BufRead,BufNewFile *.py set shiftwidth=4
au BufRead,BufNewFile *.py set tabstop=4

" Django
au BufNewFile,BufRead admin.py     setlocal filetype=python.django
au BufNewFile,BufRead urls.py      setlocal filetype=python.django
au BufNewFile,BufRead models.py    setlocal filetype=python.django
au BufNewFile,BufRead views.py     setlocal filetype=python.django
au BufNewFile,BufRead settings.py  setlocal filetype=python.django
au BufNewFile,BufRead forms.py     setlocal filetype=python.django
au BufNewFile,BufRead urls.py      setlocal nowrap
nnoremap <Leader>dh :set ft=htmldjango<CR>
nnoremap <Leader>dp :set ft=python.django<CR>

" Embedded JS
au BufNewFile,BufRead *.ejs  setlocal filetype=html

" Literate CoffeeScript
autocmd FileType litcoffee runtime ftplugin/coffee.vim


" for text files word wrap
au BufRead,BufNewFile *.txt set wrap
au BufRead,BufNewFile *.txt set lbr
au BufRead,BufNewFile *.txt set expandtab
au BufRead,BufNewFile *.txt set shiftwidth=2
au BufRead,BufNewFile *.txt set tabstop=2
au BufRead,BufNewFile *.txt set nonu
au BufRead,BufNewFile *.txt set colorcolumn=0

" reStructuredText files
au BufRead,BufNewFile *.rst set expandtab
au BufRead,BufNewFile *.rst set tabstop=4
au BufRead,BufNewFile *.rst set shiftwidth=4
au BufRead,BufNewFile *.rst set textwidth=80
au BufRead,BufNewFile *.rst set nonu

" Remove trailing whitespace on save for ruby files.
au BufWritePre *.rb :%s/\s\+$//e
au BufWritePre *.erb :%s/\s\+$//e



" ===========================================
" GUI Stuff - I don't have a seperate .gvimrc
" ===========================================
if has('gui_running')

   " Remove all the toolbar icons (like save, print, copy, etc.)
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R

    highlight SpellBad term=underline gui=undercurl guisp=Orange

    if has("gui_macvim")
        " display a vertical line at column 80
        set colorcolumn=80

        " Full screen means FULL screen
        set fuoptions=maxvert,maxhorz

        "use Solarized colorscheme, this has to be setup seperately
        set background=dark
        silent! colors desert
        silent! colorscheme solarized

        " Use Fira Code (with ligatures enabled).
        set macligatures
        set guifont=Fira\ Code:h12
    else
        " Non-MacVim GUI, like Gvim
    end
else
    " Console Vim
    set mouse=i  "enable mouse support in insert mode
endif


" put custom code in vimrc.local
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif



" Emoji shortcuts (common git commit emojis)
ab :add_test: ✅
ab :add_package: 📦
ab :upgrade: ⬆️
ab :downgrade: ⬇️
ab :art: 🎨
ab :bug: 🐛
ab :config: 📇
ab :docs: 📚
ab :db: 💾
ab :feature: ✨
ab :fix_test: 💚
ab :hotfix: 🔥
ab :lint: 👕
ab :add_log: 🔊
ab :remove_log: 🔇
ab :perf: 🐎
ab :poop: 💩 
ab :refactor: ♻️
ab :revert: ⏪
ab :security: 🔒
ab :tada: 🎉
ab :tooling: 🔧
ab :trash: 🗑️
ab :wip: 🚧
ab :table-flip:  (╯°□°）╯︵ ┻━┻

" =========
" Functions
" =========
function! RunCurrentSpecFile()
  if InSpecFile()
    let l:command = "bundle exec rspec " . @%
    call SetLastSpecCommand(l:command)
    call RunSpecs(l:command)
  endif
endfunction

function! RunNearestSpec()
  if InSpecFile()
    let l:command = "s " . @% . " -l " . line(".") . " -f documentation"
    call SetLastSpecCommand(l:command)
    call RunSpecs(l:command)
  endif
endfunction

function! RunLastSpec()
  if exists("t:last_spec_command")
    call RunSpecs(t:last_spec_command)
  endif
endfunction

function! InSpecFile()
  return match(expand("%"), "_spec.rb$") != -1
endfunction

function! SetLastSpecCommand(command)
  let t:last_spec_command = a:command
endfunction

function! RunSpecs(command)
  execute ":w\|!clear && echo " . a:command . " && echo && " . a:command
endfunction
